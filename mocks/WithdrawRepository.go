// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	withdrawstorage "github.com/valinurovdenis/gomart/internal/app/withdrawstorage"
)

// WithdrawRepository is an autogenerated mock type for the WithdrawRepository type
type WithdrawRepository struct {
	mock.Mock
}

// AddUserWithdraw provides a mock function with given fields: _a0, order
func (_m *WithdrawRepository) AddUserWithdraw(_a0 context.Context, order withdrawstorage.UserWithdraw) error {
	ret := _m.Called(_a0, order)

	if len(ret) == 0 {
		panic("no return value specified for AddUserWithdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, withdrawstorage.UserWithdraw) error); ok {
		r0 = rf(_a0, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserWithdrawals provides a mock function with given fields: _a0, login
func (_m *WithdrawRepository) GetUserWithdrawals(_a0 context.Context, login string) ([]withdrawstorage.UserWithdraw, error) {
	ret := _m.Called(_a0, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawals")
	}

	var r0 []withdrawstorage.UserWithdraw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]withdrawstorage.UserWithdraw, error)); ok {
		return rf(_a0, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []withdrawstorage.UserWithdraw); ok {
		r0 = rf(_a0, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]withdrawstorage.UserWithdraw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWithdrawRepository creates a new instance of WithdrawRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawRepository {
	mock := &WithdrawRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
