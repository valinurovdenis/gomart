// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	accrualorder "github.com/valinurovdenis/gomart/internal/app/accrualorder"

	mock "github.com/stretchr/testify/mock"
)

// AccrualOrderService is an autogenerated mock type for the AccrualOrderService type
type AccrualOrderService struct {
	mock.Mock
}

// EnqueueOrderUpdate provides a mock function with given fields: _a0, login, number
func (_m *AccrualOrderService) EnqueueOrderUpdate(_a0 context.Context, login string, number string) error {
	ret := _m.Called(_a0, login, number)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueOrderUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, login, number)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: _a0, number
func (_m *AccrualOrderService) GetOrder(_a0 context.Context, number string) (accrualorder.AccrualOrder, error) {
	ret := _m.Called(_a0, number)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 accrualorder.AccrualOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (accrualorder.AccrualOrder, error)); ok {
		return rf(_a0, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) accrualorder.AccrualOrder); ok {
		r0 = rf(_a0, number)
	} else {
		r0 = ret.Get(0).(accrualorder.AccrualOrder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccrualOrderService creates a new instance of AccrualOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccrualOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccrualOrderService {
	mock := &AccrualOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
