// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	currencybalance "github.com/valinurovdenis/gomart/internal/app/currencybalance"

	userstorage "github.com/valinurovdenis/gomart/internal/app/userstorage"
)

// BalanceStorage is an autogenerated mock type for the BalanceStorage type
type BalanceStorage struct {
	mock.Mock
}

// AddBalance provides a mock function with given fields: _a0, login, addBalance
func (_m *BalanceStorage) AddBalance(_a0 context.Context, login string, addBalance currencybalance.CurrencyBalance) error {
	ret := _m.Called(_a0, login, addBalance)

	if len(ret) == 0 {
		panic("no return value specified for AddBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, currencybalance.CurrencyBalance) error); ok {
		r0 = rf(_a0, login, addBalance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: _a0, login
func (_m *BalanceStorage) GetBalance(_a0 context.Context, login string) (userstorage.UserBalance, error) {
	ret := _m.Called(_a0, login)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 userstorage.UserBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userstorage.UserBalance, error)); ok {
		return rf(_a0, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userstorage.UserBalance); ok {
		r0 = rf(_a0, login)
	} else {
		r0 = ret.Get(0).(userstorage.UserBalance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBalance provides a mock function with given fields: _a0, login, newBalance
func (_m *BalanceStorage) SetBalance(_a0 context.Context, login string, newBalance userstorage.UserBalance) error {
	ret := _m.Called(_a0, login, newBalance)

	if len(ret) == 0 {
		panic("no return value specified for SetBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, userstorage.UserBalance) error); ok {
		r0 = rf(_a0, login, newBalance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBalanceStorage creates a new instance of BalanceStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalanceStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *BalanceStorage {
	mock := &BalanceStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
